import { useState, useEffect } from 'react'; // –î–æ–¥–∞—î–º–æ useEffect
import '../../styles/Doctor/DoctorDashboard.css';
import { fetchVisitPendingRequests } from '../../services/Doctor/fetchPendingVisitRequests'; // –î–æ–¥–∞—î–º–æ —Ñ—ñ–≥—É—Ä–Ω—ñ –¥—É–∂–∫–∏
import VisitRequestCard from '../../components/Doctor/VisitRequestPendingCard';
import { useNavigate } from 'react-router-dom';
import ChatTab from "../../components/Doctor/ChatTab";



export default function DoctorDashboard() {
    const [activeTab, setActiveTab] = useState('pending');
    const [showUserMenu, setShowUserMenu] = useState(false);
    const navigate = useNavigate();

    const tabIcons = {
        pending: 'üë•',
        schedule: 'üìÖ',
        patients: 'üìã',
        chat: 'üí¨'
    };

    const getTabLabel = (tab) => {
        const labels = {
            pending: '–û—á—ñ–∫—É—é—Ç—å',
            schedule: '–†–æ–∑–∫–ª–∞–¥',
            patients: '–ü–∞—Ü—ñ—î–Ω—Ç–∏',
            chat: '–ß–∞—Ç'
        };
        return labels[tab];
    };

    useEffect(() => {
      if (activeTab === 'pending') {
          handleFetchPendingRequests();
      }
  }, [activeTab]); // –ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É, –∫–æ–ª–∏ –∑–º—ñ–Ω—é—î—Ç—å—Å—è activeTab


    const [requests, setRequests] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    const handleFetchPendingRequests = async () => {
        setLoading(true);
        setError(null);
        try {
            const data = await fetchVisitPendingRequests();
            
            console.log(data);
            setRequests(data);
        } catch (err) {
            setError('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö');
            console.error(err);
        } finally {
            setLoading(false);
        }
    };

    const handleChatOpen = () => {
        navigate('/chat-app');
    };


    return (
        <div className="dashboard-container">
            <div className="sidebar">
                <div className="tabs-container">
                    {Object.entries(tabIcons).map(([tab, icon]) => (
                        <button
                            key={tab}
                            onClick={() => setActiveTab(tab)}
                            className={`tab-button ${activeTab === tab ? 'active' : ''}`}
                        >
                            <div>{icon}</div>
                            <div className="tab-label">{getTabLabel(tab)}</div>
                        </button>
                    ))}
                </div>

                <div className="user-profile-section">
                    <button
                        className="profile-button"
                        onClick={() => setShowUserMenu(!showUserMenu)}
                    >
                        üë®‚Äç‚öïÔ∏è
                    </button>

                    {showUserMenu && (
                        <div className="user-menu">
                            <div className="user-info">
                                <div className="user-name">–î–æ–∫—Ç–æ—Ä –Ü–≤–∞–Ω–æ–≤</div>
                                <div className="user-role">–ö–∞—Ä–¥—ñ–æ–ª–æ–≥</div>
                            </div>
                            <button className="logout-button">
                                –í–∏–π—Ç–∏
                            </button>
                        </div>
                    )}
                </div>
            </div>

            <div className="main-content">
                
                  {activeTab === 'pending' && (
          <div>
              <h2>–ü–∞—Ü—ñ—î–Ω—Ç–∏, —â–æ –æ—á—ñ–∫—É—é—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è</h2>
              {loading && <div>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>}
              {error && <div className="error-message">{error}</div>}
              <div className="requests-grid">
                    
              {!loading && !error && requests.map(request => {
                
                console.warn('Request without ID:', request);
                return ( 
                    <VisitRequestCard
                        key={request.id}
                        request={request}
                    />
                     );
                })}
              </div>
          </div>
      )}

                {activeTab === 'schedule' && (
                    <div>
                        <h2>–†–æ–∑–∫–ª–∞–¥ –ø—Ä–∏–π–æ–º—ñ–≤</h2>
                    </div>
                )}

                {activeTab === 'patients' && (
                    <div>
                        <h2>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤</h2>
                    </div>
                )}

                {activeTab === "chat" && <ChatTab />}

            </div>
        </div>
    );
}